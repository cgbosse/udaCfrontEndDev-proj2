/**
 * 
 * Manipulating the DOM exercise.
 * Exercise programmatically builds navigation,
 * scrolls to anchors from navigation,
 * and highlights section in viewport upon scrolling.
 * 
 * Dependencies: None
 * 
 * JS Version: ES2015/ES6
 * 
 * JS Standard: ESlint
 * 
*/

/**
 * Define Global Variables
 * 
*/
let navSections = document.querySelectorAll("section");
const navBar = document.getElementById("navbar__list");

/**
 * End Global Variables
 * Start Helper Functions
 * 
*/



/**
 * End Helper Functions
 * Begin Main Functions
 * 
*/

// build the nav
let navMenuCreation = function() {
    
    //Create a blank document fragment to append all new lines and then append this fragment at one go to the navbar
    let navMenuHtml = document.createDocumentFragment();
    
    navSections.forEach(function(sec) {
        let menuItem = document.createElement("li");        
        let anchor = document.createElement('a');
                
        //Obtain the Section ID
        let menuItemID = sec.id;

        //Obtain the Section Link Text from the "data-nav" attribute
        let menuItemText ="";
        menuItemText = sec.getAttribute("data-nav");
        
        //Create the anchor links to each section and create a target attribute
        anchor.innerText = menuItemText;
        anchor.setAttribute('href',("#" + menuItemID));     
        //console.log(anchor);
                        
        //Assign special class for later retrieval
        anchor.className = 'menu__link';

        //Append the anchor to the menuItem "li" element
        menuItem.appendChild(anchor);

        //Append the menuItems to the document fragment "navMenuHtml"
        navMenuHtml.append(menuItem); 
    });
    //Append the document fragment to the NavBar
    navBar.appendChild(navMenuHtml);
    
    //Adding the default active link of the visible section 1
    document.querySelectorAll('.menu__link')[0].classList.add('active');
};


/* Option 2

for (let navSection of navSections) {
    console.log(navSection.getAttribute("data-nav"));
}

*/

// Add class 'active' to section when near top of viewport

    
    function activeView() {

        //Variables to be used
        
        let sectionDistances = [];
                
    //Check which section is in view
    //Create an array of each sections Top distance

        for (let section of navSections) {
            //Establish each sections' top from the viewport using the "top" property of the object generated by ELEMENT.getBoundingClientRect() 
            let sectionDistance = section.getBoundingClientRect().top;
            //console.log("01: " + sectionDistance);
            sectionDistances.push(sectionDistance);
            
            //Setting the menu links classes back to their default state
            
        };

        console.log("02: " + sectionDistances);

        //Check which sections' distance from the top has the smallest positive distance from the top
        
        let navSectionsIndex = 0;
        let minDis = 1000000;
            for (let i = 0; i < sectionDistances.length; i++) {
                
                if (sectionDistances[i] > 0 ) {

                    if (sectionDistances[i] < minDis ) {
                        navSectionsIndex = i;
                        minDis = sectionDistances[i];
                    }; 
                };                              
            };
            //console.log("03: " + sectionDistances[navSectionsIndex]);
            //console.log("04 Index: " + navSectionsIndex); 

        //If in view Change Css Being displayed removing and adding active state using classList method 
        //Assign the active class to the section and delete it from the current
            document.querySelector('.your-active-class').className = '';
            navSections[navSectionsIndex].className = 'your-active-class'; 

  /*
        //Assign the active state to a menu link when in the section is in view
      
       let menuLinks = document.querySelectorAll('.menu__link');

        for (const menuLink of menuLinks) {
            menuLink.classList.remove('active');
        };

        console.log("05 NAVSECTION ID: " + navSections[navSectionsIndex].id);

        let activeLink = document.querySelectorAll("a[href='#" + navSections[navSectionsIndex].id + "']");
        
        console.log("06 Active Link: " + activeLink[0]);
        
        activeLink[0].classList.add('active');     
        console.log(activeLink[0]);
    */    
    };


// Scroll to anchor ID using scrollTO event
// Adding an event listener to all the menu_link anchors.

function menuLinkListener() {
    let menuLinks = document.querySelectorAll('.menu__link');
   
    for (const menuLink of menuLinks) {
        console.log('adding listener');
        menuLink.addEventListener('click', function(event) {
        
            for (const menuLink of menuLinks) {
                menuLink.classList.remove('active');
            };
        
            
        menuLink.classList.remove('active');
            
        // Stop the default link behaviour, the anchor's default scroll
        event.preventDefault();

        // call smoothScroll function
        smoothScroll(event);        
        });
    };
};

function smoothScroll(event) {





    // Add active Link status
    event.target.classList.add('active');
            


    // Function to establish the clicked anchor target's distance to scroll to
    let hrefString = " ";

        hrefString = event.target.getAttribute('href');

        //Delete the # character to select the element by id
        hrefString = hrefString.slice(1);
        //console.log(hrefString);

        // Get the starting position
        let startingPosition = document.getElementById('section1').getBoundingClientRect().top;
        //console.log(startingPosition);

        // Get the destination section's distance in pixels using ELEMENT.getBoundingClientRect()
    
        let sectionDistance = document.getElementById(hrefString).getBoundingClientRect().top - startingPosition;
        //console.log(sectionDistance);

        // Scroll to the section using window.scrollTo(x,y) using behaviour:smooth
        window.scroll({
            top: sectionDistance,
            left: 0,
            behavior: 'smooth'
        });

   };

/**
 * End Main Functions
 * Begin Events
 */ 

// Build menu 
window.addEventListener('DOMContentLoaded', (event) => {
    navMenuCreation();
    menuLinkListener();
});

// Scroll to section on link click
// Set sections as active
    window.addEventListener('scroll', function(event) {
       activeView();
    });
